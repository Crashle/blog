import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as e,e as a}from"./app-BMGeHCTd.js";const n={},t=a(`<h2 id="闭包" tabindex="-1"><a class="header-anchor" href="#闭包"><span>闭包</span></a></h2><h3 id="闭包是什么" tabindex="-1"><a class="header-anchor" href="#闭包是什么"><span>闭包是什么</span></a></h3><p>闭包是指那些能够访问自由变量的函数。自由变量是指在函数中使用的，但既不是函数参数也不是函数的局部变量的变量。闭包可以捕获并保持其创建时的环境，即使外部函数已经执行完毕，闭包仍然可以访问外部函数的变量。</p><h3 id="闭包的用途" tabindex="-1"><a class="header-anchor" href="#闭包的用途"><span>闭包的用途</span></a></h3><p>闭包主要有两个用途：</p><ol><li><p><strong>数据隐藏和封装</strong>：闭包可以用来隐藏变量，使得这些变量不能被外部访问，只能通过闭包提供的接口来访问。这可以用来实现私有变量和私有方法。</p></li><li><p><strong>函数柯里化</strong>：闭包可以用来实现函数柯里化，即将一个多参数的函数转换成一系列单参数函数。这样可以使函数更灵活，更易于复用。</p></li></ol><h3 id="闭包的原理" tabindex="-1"><a class="header-anchor" href="#闭包的原理"><span>闭包的原理</span></a></h3><p>闭包的原理是通过作用域链来实现的。当函数被定义时，它会创建一个作用域链，这个作用域链包含了函数定义时的环境。当函数被调用时，会创建一个新的执行上下文，这个执行上下文包含了函数的参数和局部变量。这个执行上下文会添加到作用域链的顶部，形成一个闭包。</p><h3 id="闭包的示例" tabindex="-1"><a class="header-anchor" href="#闭包的示例"><span>闭包的示例</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> outerFunction</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> outerVariable</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;I am outside!&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> innerFunction</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">outerVariable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> innerFunction</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10),l=[t];function r(p,h){return e(),s("div",null,l)}const c=i(n,[["render",r],["__file","closure.html.vue"]]),k=JSON.parse('{"path":"/blogs/javascript/closure.html","title":"一次性搞懂闭包","lang":"zh-CN","frontmatter":{"title":"一次性搞懂闭包","date":"2024-08-26T00:00:00.000Z","description":"闭包 闭包是什么 闭包是指那些能够访问自由变量的函数。自由变量是指在函数中使用的，但既不是函数参数也不是函数的局部变量的变量。闭包可以捕获并保持其创建时的环境，即使外部函数已经执行完毕，闭包仍然可以访问外部函数的变量。 闭包的用途 闭包主要有两个用途： 数据隐藏和封装：闭包可以用来隐藏变量，使得这些变量不能被外部访问，只能通过闭包提供的接口来访问。这可...","head":[["meta",{"property":"og:url","content":"https://crashle.github.io/blog/blog/blogs/javascript/closure.html"}],["meta",{"property":"og:site_name","content":"萩萩萩🌴"}],["meta",{"property":"og:title","content":"一次性搞懂闭包"}],["meta",{"property":"og:description","content":"闭包 闭包是什么 闭包是指那些能够访问自由变量的函数。自由变量是指在函数中使用的，但既不是函数参数也不是函数的局部变量的变量。闭包可以捕获并保持其创建时的环境，即使外部函数已经执行完毕，闭包仍然可以访问外部函数的变量。 闭包的用途 闭包主要有两个用途： 数据隐藏和封装：闭包可以用来隐藏变量，使得这些变量不能被外部访问，只能通过闭包提供的接口来访问。这可..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-28T06:10:06.000Z"}],["meta",{"property":"article:author","content":"萩萩萩🌴"}],["meta",{"property":"article:published_time","content":"2024-08-26T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-28T06:10:06.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"一次性搞懂闭包\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-08-26T00:00:00.000Z\\",\\"dateModified\\":\\"2024-08-28T06:10:06.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"萩萩萩🌴\\",\\"url\\":\\"https://www.sodaliy.top\\"}]}"]]},"headers":[{"level":2,"title":"闭包","slug":"闭包","link":"#闭包","children":[{"level":3,"title":"闭包是什么","slug":"闭包是什么","link":"#闭包是什么","children":[]},{"level":3,"title":"闭包的用途","slug":"闭包的用途","link":"#闭包的用途","children":[]},{"level":3,"title":"闭包的原理","slug":"闭包的原理","link":"#闭包的原理","children":[]},{"level":3,"title":"闭包的示例","slug":"闭包的示例","link":"#闭包的示例","children":[]}]}],"git":{"createdTime":1724825406000,"updatedTime":1724825406000,"contributors":[{"name":"萩萩萩","email":"qqm2017@163.com","commits":1}]},"readingTime":{"minutes":1.27,"words":380},"filePathRelative":"blogs/javascript/closure.md","localizedDate":"2024年8月26日","excerpt":"<h2>闭包</h2>\\n<h3>闭包是什么</h3>\\n<p>闭包是指那些能够访问自由变量的函数。自由变量是指在函数中使用的，但既不是函数参数也不是函数的局部变量的变量。闭包可以捕获并保持其创建时的环境，即使外部函数已经执行完毕，闭包仍然可以访问外部函数的变量。</p>\\n<h3>闭包的用途</h3>\\n<p>闭包主要有两个用途：</p>\\n<ol>\\n<li>\\n<p><strong>数据隐藏和封装</strong>：闭包可以用来隐藏变量，使得这些变量不能被外部访问，只能通过闭包提供的接口来访问。这可以用来实现私有变量和私有方法。</p>\\n</li>\\n<li>\\n<p><strong>函数柯里化</strong>：闭包可以用来实现函数柯里化，即将一个多参数的函数转换成一系列单参数函数。这样可以使函数更灵活，更易于复用。</p>\\n</li>\\n</ol>","autoDesc":true}');export{c as comp,k as data};
